/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  DexRouterManager,
  DexRouterManagerInterface,
} from "../DexRouterManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_dexRouterAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_stableCoin",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_networkId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ethAmount",
        type: "uint256",
      },
    ],
    name: "addLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getDexRouter",
    outputs: [
      {
        internalType: "contract IMetaStocksMultiDexRouter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDexRouterAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_networkId",
        type: "uint256",
      },
    ],
    name: "getNativeTokenAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isInSwap",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "swapTokensForNativeToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "swapTokensForStableCoin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161086938038061086983398101604081905261002f91610082565b600080546001600160a01b039485166001600160a01b031991821617909155600291909155600180549290931691161790556100be565b80516001600160a01b038116811461007d57600080fd5b919050565b60008060006060848603121561009757600080fd5b6100a084610066565b92506100ae60208501610066565b9150604084015190509250925092565b61079c806100cd6000396000f3fe608060405234801561001057600080fd5b506004361061006d5760003560e01c8063197e8da9146100725780632c4a7361146100b657806385954d8c146100cb578063b9c55241146100cb578063cc996899146100dc578063cf6c62ea146100f9578063f7a765761461010c575b600080fd5b61009961008036600461056c565b5073ae13d989dac2f0debff460ac112a837c89baa7cd90565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c96100c43660046105a1565b61011f565b005b6000546001600160a01b0316610099565b600154600160a01b900460ff1660405190151581526020016100ad565b6100c96101073660046105cb565b6102cd565b6100c961011a36600461060d565b610401565b6040805160038082526080820190925260009160208201606080368337019050509050308160008151811061015657610156610649565b6001600160a01b039092166020928302919091019091015273ae13d989dac2f0debff460ac112a837c89baa7cd8160018151811061019657610196610649565b6001600160a01b0392831660209182029290920101526001548251911690829060029081106101c7576101c7610649565b6001600160a01b03928316602091820292909201015260015460005460405163095ea7b360e01b81529183169263095ea7b39261020e92909116906000199060040161065f565b6020604051808303816000875af115801561022d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102519190610678565b50600080546001600160a01b031690635c11d7959084908487610276426103e86106a1565b6040518663ffffffff1660e01b81526004016102969594939291906106c7565b600060405180830381600087803b1580156102b057600080fd5b505af11580156102c4573d6000803e3d6000fd5b50505050505050565b60005460405163095ea7b360e01b81526001600160a01b038681169263095ea7b39261030392909116906000199060040161065f565b6020604051808303816000875af1158015610322573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103469190610678565b50600080546001600160a01b03169063f305d71990839030908690808961036f426127106106a1565b60405160e089901b6001600160e01b03191681526001600160a01b039687166004820152602481019590955260448501939093526064840191909152909216608482015260a481019190915260c40160606040518083038185885af11580156103dc573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906102c49190610738565b604080516002808252606082018352600092602083019080368337019050509050838160008151811061043657610436610649565b6001600160a01b039092166020928302919091019091015273ae13d989dac2f0debff460ac112a837c89baa7cd8160018151811061047657610476610649565b6001600160a01b03928316602091820292909201015260005460405163095ea7b360e01b81528683169263095ea7b3926104b9929116906000199060040161065f565b6020604051808303816000875af11580156104d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fc9190610678565b506000805460405163791ac94760e01b81526001600160a01b039091169163791ac947916105349186918690899042906004016106c7565b600060405180830381600087803b15801561054e57600080fd5b505af1158015610562573d6000803e3d6000fd5b5050505050505050565b60006020828403121561057e57600080fd5b5035919050565b80356001600160a01b038116811461059c57600080fd5b919050565b600080604083850312156105b457600080fd5b6105bd83610585565b946020939093013593505050565b600080600080608085870312156105e157600080fd5b6105ea85610585565b93506105f860208601610585565b93969395505050506040820135916060013590565b60008060006060848603121561062257600080fd5b61062b84610585565b925061063960208501610585565b9150604084013590509250925092565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03929092168252602082015260400190565b60006020828403121561068a57600080fd5b8151801515811461069a57600080fd5b9392505050565b600082198211156106c257634e487b7160e01b600052601160045260246000fd5b500190565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156107175784516001600160a01b0316835293830193918301916001016106f2565b50506001600160a01b03969096166060850152505050608001529392505050565b60008060006060848603121561074d57600080fd5b835192506020840151915060408401519050925092509256fea26469706673582212203f2f8203b0682c04201cb15664fb43b34f646751ad2474858ab249b3adf6abba64736f6c634300080e0033";

export class DexRouterManager__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _dexRouterAddress: string,
    _stableCoin: string,
    _networkId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DexRouterManager> {
    return super.deploy(
      _dexRouterAddress,
      _stableCoin,
      _networkId,
      overrides || {}
    ) as Promise<DexRouterManager>;
  }
  getDeployTransaction(
    _dexRouterAddress: string,
    _stableCoin: string,
    _networkId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _dexRouterAddress,
      _stableCoin,
      _networkId,
      overrides || {}
    );
  }
  attach(address: string): DexRouterManager {
    return super.attach(address) as DexRouterManager;
  }
  connect(signer: Signer): DexRouterManager__factory {
    return super.connect(signer) as DexRouterManager__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DexRouterManagerInterface {
    return new utils.Interface(_abi) as DexRouterManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DexRouterManager {
    return new Contract(address, _abi, signerOrProvider) as DexRouterManager;
  }
}
