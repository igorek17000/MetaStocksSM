/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MidasMultinetworkRouterManager,
  MidasMultinetworkRouterManagerInterface,
} from "../MidasMultinetworkRouterManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_dexRouterAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ethAmount",
        type: "uint256",
      },
    ],
    name: "addLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getDexRouter",
    outputs: [
      {
        internalType: "contract IMidasMultiNetworkRouter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDexRouterAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_networkId",
        type: "uint256",
      },
    ],
    name: "getNativeTokenAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_networkId",
        type: "uint256",
      },
    ],
    name: "getStableCoinAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "isInSwap",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dexRouterAddress",
        type: "address",
      },
    ],
    name: "setDexRouter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "swapTokensForNativeToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "swapTokensForStableCoin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516108e93803806108e983398101604081905261002f91610061565b600080546001600160a01b039092166001600160a01b031992831617905561a869600255600180549091169055610091565b60006020828403121561007357600080fd5b81516001600160a01b038116811461008a57600080fd5b9392505050565b610849806100a06000396000f3fe608060405234801561001057600080fd5b50600436106100835760003560e01c8063197e8da91461008857806385954d8c146100b8578063b8b03b22146100c9578063b9c55241146100b8578063cc996899146100de578063cf6c62ea146100fb578063dd6e491e14610088578063f72f863b1461010e578063f7a765761461013e575b600080fd5b61009b610096366004610628565b610151565b6040516001600160a01b0390911681526020015b60405180910390f35b6000546001600160a01b031661009b565b6100dc6100d736600461065d565b61020d565b005b600154600160a01b900460ff1660405190151581526020016100af565b6100dc610109366004610699565b6103ba565b6100dc61011c3660046106db565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6100dc61014c36600461065d565b6104f7565b600073ae13d989dac2f0debff460ac112a837c89baa7cd606183900361018c575073ae13d989dac2f0debff460ac112a837c89baa7cd6101f1565b826061036101af575073ae13d989dac2f0debff460ac112a837c89baa7cd6101f1565b60405162461bcd60e51b8152602060048201526013602482015272756e737570706f72746564206e6574776f726b60681b604482015260640160405180910390fd5b5073ae13d989dac2f0debff460ac112a837c89baa7cd92915050565b60408051600380825260808201909252600091602082016060803683370190505090508381600081518110610244576102446106fd565b60200260200101906001600160a01b031690816001600160a01b03168152505061026f600254610151565b81600181518110610282576102826106fd565b6001600160a01b0392831660209182029290920101526001548251911690829060029081106102b3576102b36106fd565b6001600160a01b03928316602091820292909201015260015460005460405163095ea7b360e01b81529183169263095ea7b3926102fa929091169060001990600401610713565b6020604051808303816000875af1158015610319573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033d919061072c565b50600080546001600160a01b031690635c11d7959084908487610362426103e861074e565b6040518663ffffffff1660e01b8152600401610382959493929190610774565b600060405180830381600087803b15801561039c57600080fd5b505af11580156103b0573d6000803e3d6000fd5b5050505050505050565b60005460405163095ea7b360e01b81526001600160a01b038681169263095ea7b3926103f0929091169060001990600401610713565b6020604051808303816000875af115801561040f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610433919061072c565b50600080546001600160a01b03169063f305d71990839030908690808961045c4261271061074e565b60405160e089901b6001600160e01b03191681526001600160a01b039687166004820152602481019590955260448501939093526064840191909152909216608482015260a481019190915260c40160606040518083038185885af11580156104c9573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906104ee91906107e5565b50505050505050565b604080516002808252606082018352600092602083019080368337019050509050838160008151811061052c5761052c6106fd565b60200260200101906001600160a01b031690816001600160a01b031681525050610557600254610151565b8160018151811061056a5761056a6106fd565b6001600160a01b03928316602091820292909201015260005460405163095ea7b360e01b81528683169263095ea7b3926105ad9291169060001990600401610713565b6020604051808303816000875af11580156105cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f0919061072c565b506000805460405163791ac94760e01b81526001600160a01b039091169163791ac94791610382918691869089904290600401610774565b60006020828403121561063a57600080fd5b5035919050565b80356001600160a01b038116811461065857600080fd5b919050565b60008060006060848603121561067257600080fd5b61067b84610641565b925061068960208501610641565b9150604084013590509250925092565b600080600080608085870312156106af57600080fd5b6106b885610641565b93506106c660208601610641565b93969395505050506040820135916060013590565b6000602082840312156106ed57600080fd5b6106f682610641565b9392505050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03929092168252602082015260400190565b60006020828403121561073e57600080fd5b815180151581146106f657600080fd5b6000821982111561076f57634e487b7160e01b600052601160045260246000fd5b500190565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156107c45784516001600160a01b03168352938301939183019160010161079f565b50506001600160a01b03969096166060850152505050608001529392505050565b6000806000606084860312156107fa57600080fd5b835192506020840151915060408401519050925092509256fea26469706673582212204d91ed05d6e6b951d79e34bf634aa72b1feaa068d82c1464c308073873eb3b9c64736f6c634300080e0033";

export class MidasMultinetworkRouterManager__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _dexRouterAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MidasMultinetworkRouterManager> {
    return super.deploy(
      _dexRouterAddress,
      overrides || {}
    ) as Promise<MidasMultinetworkRouterManager>;
  }
  getDeployTransaction(
    _dexRouterAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_dexRouterAddress, overrides || {});
  }
  attach(address: string): MidasMultinetworkRouterManager {
    return super.attach(address) as MidasMultinetworkRouterManager;
  }
  connect(signer: Signer): MidasMultinetworkRouterManager__factory {
    return super.connect(signer) as MidasMultinetworkRouterManager__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MidasMultinetworkRouterManagerInterface {
    return new utils.Interface(_abi) as MidasMultinetworkRouterManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MidasMultinetworkRouterManager {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MidasMultinetworkRouterManager;
  }
}
