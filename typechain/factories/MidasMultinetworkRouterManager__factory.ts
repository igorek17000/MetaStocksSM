/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MidasMultinetworkRouterManager,
  MidasMultinetworkRouterManagerInterface,
} from "../MidasMultinetworkRouterManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_dexRouterAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ethAmount",
        type: "uint256",
      },
    ],
    name: "addLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getDexRouter",
    outputs: [
      {
        internalType: "contract IMidasMultiNetworkRouter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDexRouterAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_networkId",
        type: "uint256",
      },
    ],
    name: "getNativeTokenAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "isInSwap",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dexRouterAddress",
        type: "address",
      },
    ],
    name: "setDexRouter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "swapTokensForNativeToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "swapTokensForStableCoin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161093638038061093683398101604081905261002f91610061565b600080546001600160a01b039092166001600160a01b031992831617905561a869600255600180549091169055610091565b60006020828403121561007357600080fd5b81516001600160a01b038116811461008a57600080fd5b9392505050565b610896806100a06000396000f3fe608060405234801561001057600080fd5b50600436106100785760003560e01c8063197e8da91461007d5780632c4a7361146100ad57806385954d8c146100c2578063b9c55241146100c2578063cc996899146100d3578063cf6c62ea146100f0578063f72f863b14610103578063f7a7657614610133575b600080fd5b61009061008b36600461064b565b610146565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c06100bb366004610680565b610202565b005b6000546001600160a01b0316610090565b600154600160a01b900460ff1660405190151581526020016100a4565b6100c06100fe3660046106aa565b6103ae565b6100c06101113660046106ec565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6100c061014136600461070e565b6104e2565b600073ae13d989dac2f0debff460ac112a837c89baa7cd6061839003610181575073ae13d989dac2f0debff460ac112a837c89baa7cd6101e6565b826061036101a4575073ae13d989dac2f0debff460ac112a837c89baa7cd6101e6565b60405162461bcd60e51b8152602060048201526013602482015272756e737570706f72746564206e6574776f726b60681b604482015260640160405180910390fd5b5073ae13d989dac2f0debff460ac112a837c89baa7cd92915050565b604080516003808252608082019092526000916020820160608036833701905050905030816000815181106102395761023961074a565b60200260200101906001600160a01b031690816001600160a01b031681525050610264600254610146565b816001815181106102775761027761074a565b6001600160a01b0392831660209182029290920101526001548251911690829060029081106102a8576102a861074a565b6001600160a01b03928316602091820292909201015260015460005460405163095ea7b360e01b81529183169263095ea7b3926102ef929091169060001990600401610760565b6020604051808303816000875af115801561030e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103329190610779565b50600080546001600160a01b031690635c11d7959084908487610357426103e861079b565b6040518663ffffffff1660e01b81526004016103779594939291906107c1565b600060405180830381600087803b15801561039157600080fd5b505af11580156103a5573d6000803e3d6000fd5b50505050505050565b60005460405163095ea7b360e01b81526001600160a01b038681169263095ea7b3926103e4929091169060001990600401610760565b6020604051808303816000875af1158015610403573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104279190610779565b50600080546001600160a01b03169063f305d7199083903090869080896104504261271061079b565b60405160e089901b6001600160e01b03191681526001600160a01b039687166004820152602481019590955260448501939093526064840191909152909216608482015260a481019190915260c40160606040518083038185885af11580156104bd573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906103a59190610832565b60408051600280825260608201835260009260208301908036833701905050905083816000815181106105175761051761074a565b60200260200101906001600160a01b031690816001600160a01b031681525050610542600254610146565b816001815181106105555761055561074a565b6001600160a01b03928316602091820292909201015260005460405163095ea7b360e01b81528683169263095ea7b3926105989291169060001990600401610760565b6020604051808303816000875af11580156105b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105db9190610779565b506000805460405163791ac94760e01b81526001600160a01b039091169163791ac947916106139186918690899042906004016107c1565b600060405180830381600087803b15801561062d57600080fd5b505af1158015610641573d6000803e3d6000fd5b5050505050505050565b60006020828403121561065d57600080fd5b5035919050565b80356001600160a01b038116811461067b57600080fd5b919050565b6000806040838503121561069357600080fd5b61069c83610664565b946020939093013593505050565b600080600080608085870312156106c057600080fd5b6106c985610664565b93506106d760208601610664565b93969395505050506040820135916060013590565b6000602082840312156106fe57600080fd5b61070782610664565b9392505050565b60008060006060848603121561072357600080fd5b61072c84610664565b925061073a60208501610664565b9150604084013590509250925092565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03929092168252602082015260400190565b60006020828403121561078b57600080fd5b8151801515811461070757600080fd5b600082198211156107bc57634e487b7160e01b600052601160045260246000fd5b500190565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156108115784516001600160a01b0316835293830193918301916001016107ec565b50506001600160a01b03969096166060850152505050608001529392505050565b60008060006060848603121561084757600080fd5b835192506020840151915060408401519050925092509256fea26469706673582212209f8dfe99b02c395a7ce2f666f9ba1675ab0e8361efb9dadb132c948200dc239d64736f6c634300080e0033";

export class MidasMultinetworkRouterManager__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _dexRouterAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MidasMultinetworkRouterManager> {
    return super.deploy(
      _dexRouterAddress,
      overrides || {}
    ) as Promise<MidasMultinetworkRouterManager>;
  }
  getDeployTransaction(
    _dexRouterAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_dexRouterAddress, overrides || {});
  }
  attach(address: string): MidasMultinetworkRouterManager {
    return super.attach(address) as MidasMultinetworkRouterManager;
  }
  connect(signer: Signer): MidasMultinetworkRouterManager__factory {
    return super.connect(signer) as MidasMultinetworkRouterManager__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MidasMultinetworkRouterManagerInterface {
    return new utils.Interface(_abi) as MidasMultinetworkRouterManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MidasMultinetworkRouterManager {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MidasMultinetworkRouterManager;
  }
}
