/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MetaStocksCompanyManagerInterface extends ethers.utils.Interface {
  functions: {
    "ceosCompanies(address)": FunctionFragment;
    "createCompany()": FunctionFragment;
    "getCompanyId(address)": FunctionFragment;
    "isCeo(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ceosCompanies",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createCompany",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCompanyId",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isCeo", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "ceosCompanies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCompany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompanyId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isCeo", data: BytesLike): Result;

  events: {};
}

export class MetaStocksCompanyManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MetaStocksCompanyManagerInterface;

  functions: {
    ceosCompanies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createCompany(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCompanyId(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isCeo(account: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  ceosCompanies(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  createCompany(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCompanyId(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  isCeo(account: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    ceosCompanies(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    createCompany(overrides?: CallOverrides): Promise<void>;

    getCompanyId(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCeo(account: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    ceosCompanies(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    createCompany(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCompanyId(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCeo(account: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ceosCompanies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createCompany(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCompanyId(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCeo(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
